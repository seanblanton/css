'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _jsYaml = require('js-yaml');

var _jsYaml2 = _interopRequireDefault(_jsYaml);

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

exports.default = _postcss2.default.plugin('postcss-map', function (opts) {
  opts = _extends({
    maps: [],
    basePath: process.cwd(),
    defaultMap: 'config'
  }, opts);

  var filtered = [];
  var maps = Object.create(null);
  var paths = opts.maps.filter(function (map) {
    if (typeof map === 'string' && filtered.indexOf(map) === -1) {
      filtered.push(map);
      return true;
    }
    if ((typeof map === 'undefined' ? 'undefined' : _typeof(map)) === 'object') _extends(maps, map);
  }).map(function (map) {
    return _path2.default.resolve(opts.basePath, map);
  });

  var promises = paths.map(function (map) {
    return new Promise(function (resolve, reject) {
      (0, _fs.readFile)(map, 'utf-8', function (err, data) {
        if (err) return reject(err);
        resolve(data);
      });
    }).then(function (data) {
      var name = _path2.default.basename(map, _path2.default.extname(map));
      maps[name] = _jsYaml2.default.safeLoad(data, {
        filename: map
      });
    });
  });

  return function (css) {
    return Promise.all(promises).then(function () {
      var parser = new _parser2.default(opts, maps);

      css.walk(function (node) {
        if (node.type === 'decl') return parser.processDecl(node);
        if (node.type === 'atrule') return parser.processAtRule(node);
      });
    });
  };
});